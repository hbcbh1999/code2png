#!/usr/bin/env node

const fs = require('fs');
const {
  basename,
  resolve,
} = require('path');
const { tmpdir } = require('os');
const minimist = require('minimist');

const capture = require('../src/capture');
const render = require('../src/render');

const DEFAULT_LANGUAGE = 'javascript';
const DEFAULT_THEME = 'okaidia';
const DEFAULT_FILENAME = 'code2png.png';

const argv = minimist(process.argv.slice(2), {
  default: {
    theme: DEFAULT_THEME,
  },
  alias: {
    t: 'theme',
  },
});

function usage () {
  process.stdout.write(`
Usage: ${basename(process.argv[1])} [filename] [options...]

Options:

    -o             the output file (default = '${DEFAULT_FILENAME}')
    -t, --theme    any valid prism.js theme (default = '${DEFAULT_THEME}')

`);
  process.exit(2);
}

function code2png (code, outfile) {
  const renderFile = 'code2png.html';
  const serverDir = tmpdir();

  const content = render({
    code,
    theme: argv.theme,
    language: DEFAULT_LANGUAGE,
  });

  fs.writeFileSync(resolve(serverDir, renderFile), content);

  return capture({
    dir: serverDir,
    path: `/${renderFile}`,
    imageFile: resolve(process.cwd(), outfile),
  });
}

const fileCount = argv._.length;

if (fileCount > 1) {
  usage();
} else if (fileCount === 1) {
  const codeFile = argv._[0];
  const code = fs.readFileSync(codeFile, 'utf8');
  const outfile = argv.o || `${basename(codeFile)}.png` || DEFAULT_FILENAME;
  code2png(code, outfile);
} else {
  let code = '';
  process.stdin.on('readable', () => {
    const chunk = process.stdin.read();
    if (chunk !== null) {
      code += chunk;
    }
  });

  const outfile = argv.o || DEFAULT_FILENAME;
  process.stdin.on('end', () => code2png(code, outfile));
}
